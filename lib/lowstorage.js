var u=(...s)=>{for(let t of s)if(typeof t!="object"||t===null)throw new Error("lowstorage: missing args or args not an object")},r=(s,t)=>Object.keys(t).every(e=>s[e]===t[e]),h=()=>crypto.randomUUID(),o=(s,t)=>typeof s<"u"&&s!==null&&typeof s[t]=="function",d=s=>typeof s=="object"&&s!==null&&o(s,"get")&&o(s,"put")&&o(s,"delete")&&o(s,"list"),_=(s,t)=>{if(t&&d(s[t]))return s[t];throw new Error("lowstorage: no valid store found")},c=class{constructor(t,e){this._colName=t,this._store=e}skip(t){return this._skip=t,this}limit(t){return this._limit=t,this}async _loadData(){try{let t=await this._store.get(`${this._colName}/${this._colName}.json`);return t?t.json():[]}catch(t){if(t.code==="ENOENT")return[];throw t}}async _saveData(t){let e=`${this._colName}/${this._colName}.json`;return this._store.put(e,JSON.stringify(t))}async insert(t){Array.isArray(t)||(t=[t]);let e=await this._loadData();for(let a of t){if(typeof a!="object"||a===null)throw new Error("Invalid input: input must be an object or an array of objects");a._id=a._id||h(),e.push(a)}return await this._saveData(e),t.length===1?t[0]:t}async find(t={}){let n=(await this._loadData()).filter(i=>r(i,t));return this._skip&&(n=n.slice(this._skip)),this._limit&&(n=n.slice(0,this._limit)),this._skip=void 0,this._limit=void 0,n}async findOne(t={}){return(await this.find(t))[0]||null}async update(t={},e={}){let a=await this._loadData(),n=0;for(let i=0;i<a.length;i++)r(a[i],t)&&(Object.assign(a[i],e),n++);return n>0&&await this._saveData(a),n}async updateOne(t={},e={}){let a=await this._loadData(),n=a.findIndex(i=>r(i,t));return n!==-1?(Object.assign(a[n],e),await this._saveData(a),1):0}async delete(t={}){let e=await this._loadData(),a=e.length,n=e.filter(i=>!r(i,t));return await this._saveData(n),a-n.length}async count(t={}){return(await this.find(t)).length}async remove(){let e=(await this._loadData()).length;return await this._saveData([]),e}},l=class{constructor(t,e){u(t),this._store=_(t,e)}collection(t){return new c(t,this._store)}async listCollections(){let t=await this._store.list(),e=t.truncated,a=e?t.cursor:void 0;for(;e;){let i=await this._store.list({cursor:a});t.objects.push(...i.objects),e=i.truncated,a=i.cursor}return t.objects.filter(i=>i.key.endsWith(".json")).map(i=>i.key.split("/")[0])}},f=l;export{f as default};

{
  "version": 3,
  "sources": ["../node_modules/ultralight-s3/src/index.ts", "../src/lowstorage.js", "../src/errors.js", "../src/helpers.js"],
  "sourcesContent": ["'use strict';\n\ninterface S3Config {\n  accessKeyId: string;\n  secretAccessKey: string;\n  endpoint: string;\n  bucketName: string;\n  region?: string;\n  maxRequestSizeInBytes?: number;\n  requestAbortTimeout?: number;\n  logger?: Logger;\n}\n\ndeclare global {\n  interface Crypto {\n    createHmac: (\n      algorithm: string,\n      key: string | Buffer,\n    ) => {\n      update: (data: string | Buffer) => void;\n      digest: (encoding?: 'hex' | 'base64' | 'latin1') => string;\n    };\n    createHash: (algorithm: string) => {\n      update: (data: string | Buffer) => void;\n      digest: (encoding?: 'hex' | 'base64' | 'latin1') => string;\n    };\n  }\n}\n\ninterface Logger {\n  info: (message: string, ...args: any[]) => void;\n  warn: (message: string, ...args: any[]) => void;\n  error: (message: string, ...args: any[]) => void;\n}\n\ninterface UploadPart {\n  partNumber: number;\n  ETag: string;\n}\n\ninterface CompleteMultipartUploadResult {\n  Location: string;\n  Bucket: string;\n  Key: string;\n  ETag: string;\n}\n\ntype HttpMethod = 'POST' | 'GET' | 'HEAD' | 'PUT' | 'DELETE';\n\nlet _createHmac = crypto.createHmac || (await import('node:crypto')).createHmac;\nlet _createHash = crypto.createHash || (await import('node:crypto')).createHash;\n\nif (typeof _createHmac === 'undefined' && typeof _createHash === 'undefined') {\n  console.error(\n    'ultralight-S3 Module: Crypto functions are not available, please report the issue with necessary description: https://github.com/sentienhq/ultralight-s3/issues',\n  );\n}\n\n// Constants\nconst AWS_ALGORITHM = 'AWS4-HMAC-SHA256';\nconst AWS_REQUEST_TYPE = 'aws4_request';\nconst S3_SERVICE = 's3';\nconst LIST_TYPE = '2';\nconst UNSIGNED_PAYLOAD = 'UNSIGNED-PAYLOAD';\nconst DEFAULT_STREAM_CONTENT_TYPE = 'application/octet-stream';\nconst XML_CONTENT_TYPE = 'application/xml';\nconst JSON_CONTENT_TYPE = 'application/json';\n// List of keys that might contain sensitive information\nconst SENSITIVE_KEYS_REDACTED = ['accessKeyId', 'secretAccessKey', 'sessionToken', 'password'];\nconst MIN_MAX_REQUEST_SIZE_IN_BYTES = 5 * 1024 * 1024;\n\n// Headers\nconst HEADER_AMZ_CONTENT_SHA256 = 'x-amz-content-sha256';\nconst HEADER_AMZ_DATE = 'x-amz-date';\nconst HEADER_HOST = 'host';\nconst HEADER_AUTHORIZATION = 'Authorization';\nconst HEADER_CONTENT_TYPE = 'Content-Type';\nconst HEADER_CONTENT_LENGTH = 'Content-Length';\nconst HEADER_ETAG = 'etag';\nconst HEADER_LAST_MODIFIED = 'last-modified';\n\n// Error messages\nexport const ERROR_PREFIX = 'ultralight-s3 Module: ';\nconst ERROR_ACCESS_KEY_REQUIRED = `${ERROR_PREFIX}accessKeyId must be a non-empty string`;\nconst ERROR_SECRET_KEY_REQUIRED = `${ERROR_PREFIX}secretAccessKey must be a non-empty string`;\nconst ERROR_ENDPOINT_REQUIRED = `${ERROR_PREFIX}endpoint must be a non-empty string`;\nconst ERROR_BUCKET_NAME_REQUIRED = `${ERROR_PREFIX}bucketName must be a non-empty string`;\nconst ERROR_KEY_REQUIRED = `${ERROR_PREFIX}key must be a non-empty string`;\nconst ERROR_UPLOAD_ID_REQUIRED = `${ERROR_PREFIX}uploadId must be a non-empty string`;\nconst ERROR_PARTS_REQUIRED = `${ERROR_PREFIX}parts must be a non-empty array`;\nconst ERROR_INVALID_PART = `${ERROR_PREFIX}Each part must have a partNumber (number) and ETag (string)`;\nconst ERROR_DATA_BUFFER_REQUIRED = `${ERROR_PREFIX}data must be a Buffer or string`;\n// const ERROR_PATH_REQUIRED = `${ERROR_PREFIX}path must be a string`;\nconst ERROR_PREFIX_TYPE = `${ERROR_PREFIX}prefix must be a string`;\nconst ERROR_MAX_KEYS_TYPE = `${ERROR_PREFIX}maxKeys must be a positive integer`;\nconst ERROR_DELIMITER_REQUIRED = `${ERROR_PREFIX}delimiter must be a string`;\n\nconst expectArray: { [key: string]: boolean } = {\n  contents: true,\n};\n\nconst encodeAsHex = (c: string): string => `%${c.charCodeAt(0).toString(16).toUpperCase()}`;\n\nconst uriEscape = (uriStr: string): string => {\n  return encodeURIComponent(uriStr).replace(/[!'()*]/g, encodeAsHex);\n};\n\nconst uriResourceEscape = (string: string): string => {\n  return uriEscape(string).replace(/%2F/g, '/');\n};\n\n/**\n * S3 class for interacting with S3-compatible object storage services.\n * This class provides methods for common S3 operations such as uploading, downloading,\n * and deleting objects, as well as multipart uploads.\n *\n * @class\n * @example\n * const s3 = new S3({\n *   accessKeyId: 'your-access-key',\n *   secretAccessKey: 'your-secret-key',\n *   endpoint: 'https://your-s3-endpoint.com',\n *   bucketName: 'your-bucket-name',\n *   region: 'us-east-1' // by default is auto\n * });\n *\n * // Upload a file\n * await s3.put('example.txt', 'Hello, World!');\n *\n * // Download a file\n * const content = await s3.get('example.txt');\n *\n * // Delete a file\n * await s3.delete('example.txt');\n */\nclass S3 {\n  /**\n   * Creates an instance of the S3 class.\n   *\n   * @constructor\n   * @param {Object} config - Configuration options for the S3 instance.\n   * @param {string} config.accessKeyId - The access key ID for authentication.\n   * @param {string} config.secretAccessKey - The secret access key for authentication.\n   * @param {string} config.endpoint - The endpoint URL of the S3-compatible service.\n   * @param {string} [config.bucketName=''] - The name of the bucket to operate on.\n   * @param {string} [config.region='auto'] - The region of the S3 service.\n   * @param {number} [config.maxRequestSizeInBytes=5242880] - The maximum size of a single request in bytes (minimum for AWS S3 is 5MB).\n   * @param {number} [config.requestAbortTimeout=undefined] - The timeout in milliseconds after which a request should be aborted (careful on streamed requests).\n   * @param {Object} [config.logger=null] - A logger object with methods like info, warn, error.\n   * @throws {TypeError} Will throw an error if required parameters are missing or of incorrect type.\n   */\n  private accessKeyId: string;\n  private secretAccessKey: string;\n  private endpoint: string;\n  private bucketName: string;\n  private region: string;\n  private maxRequestSizeInBytes: number;\n  private requestAbortTimeout?: number;\n  private logger?: Logger;\n\n  constructor({\n    accessKeyId,\n    secretAccessKey,\n    endpoint,\n    bucketName,\n    region = 'auto',\n    maxRequestSizeInBytes = MIN_MAX_REQUEST_SIZE_IN_BYTES,\n    requestAbortTimeout = undefined,\n    logger = undefined,\n  }: S3Config) {\n    this._validateConstructorParams(accessKeyId, secretAccessKey, endpoint, bucketName);\n    this.accessKeyId = accessKeyId;\n    this.secretAccessKey = secretAccessKey;\n    this.endpoint = endpoint;\n    this.bucketName = bucketName;\n    this.region = region;\n    this.maxRequestSizeInBytes = maxRequestSizeInBytes;\n    this.requestAbortTimeout = requestAbortTimeout;\n    this.logger = logger;\n  }\n\n  private _validateConstructorParams(\n    accessKeyId: string,\n    secretAccessKey: string,\n    endpoint: string,\n    bucketName: string,\n  ): void {\n    if (typeof accessKeyId !== 'string' || accessKeyId.trim().length === 0)\n      throw new TypeError(ERROR_ACCESS_KEY_REQUIRED);\n    if (typeof secretAccessKey !== 'string' || secretAccessKey.trim().length === 0)\n      throw new TypeError(ERROR_SECRET_KEY_REQUIRED);\n    if (typeof endpoint !== 'string' || endpoint.trim().length === 0) throw new TypeError(ERROR_ENDPOINT_REQUIRED);\n    if (typeof bucketName !== 'string' || bucketName.trim().length === 0)\n      throw new TypeError(ERROR_BUCKET_NAME_REQUIRED);\n  }\n\n  private _checkMethodHeadnGet(method: string): void {\n    if (method !== 'GET' && method !== 'HEAD') {\n      this._log('error', `${ERROR_PREFIX}method must be either GET or HEAD`);\n      throw new Error('method must be either GET or HEAD');\n    }\n  }\n\n  private _checkKey(key: string): void {\n    if (typeof key !== 'string' || key.trim().length === 0) {\n      this._log('error', ERROR_KEY_REQUIRED);\n      throw new TypeError(ERROR_KEY_REQUIRED);\n    }\n  }\n\n  private _checkDelimiter(delimiter: string): void {\n    if (typeof delimiter !== 'string' || delimiter.trim().length === 0) {\n      this._log('error', ERROR_DELIMITER_REQUIRED);\n      throw new TypeError(ERROR_DELIMITER_REQUIRED);\n    }\n  }\n\n  private _checkPrefix(prefix: string): void {\n    if (typeof prefix !== 'string') {\n      this._log('error', ERROR_PREFIX_TYPE);\n      throw new TypeError(ERROR_PREFIX_TYPE);\n    }\n  }\n\n  private _checkMaxKeys(maxKeys: number): void {\n    if (typeof maxKeys !== 'number' || maxKeys <= 0) {\n      this._log('error', ERROR_MAX_KEYS_TYPE);\n      throw new TypeError(ERROR_MAX_KEYS_TYPE);\n    }\n  }\n\n  private _checkOpts(opts: Record<string, any>): void {\n    if (typeof opts !== 'object') {\n      this._log('error', `${ERROR_PREFIX}opts must be an object`);\n      throw new TypeError(`${ERROR_PREFIX}opts must be an object`);\n    }\n  }\n\n  /**\n   * Internal method to log messages with sanitized sensitive information.\n   * @param {string} level - The log level (e.g., 'info', 'warn', 'error').\n   * @param {string} message - The message to log.\n   * @param {Object} [additionalData={}] - Additional data to include in the log.\n   * @private\n   */\n  private _log(\n    level: 'info' | 'warn' | 'error',\n    message: string,\n    additionalData: Record<string, any> | string = {},\n  ): void {\n    if (this.logger && typeof this.logger[level] === 'function') {\n      // Function to recursively sanitize an object\n      const sanitize = (obj: any): any => {\n        if (typeof obj !== 'object' || obj === null) {\n          return obj;\n        }\n        return Object.keys(obj).reduce(\n          (acc: any, key) => {\n            if (SENSITIVE_KEYS_REDACTED.includes(key.toLowerCase())) {\n              acc[key] = '[REDACTED]';\n            } else if (typeof obj[key] === 'object' && obj[key] !== null) {\n              acc[key] = sanitize(obj[key]);\n            } else {\n              acc[key] = obj[key];\n            }\n            return acc;\n          },\n          Array.isArray(obj) ? [] : {},\n        );\n      };\n\n      // Sanitize the additional data\n      const sanitizedData = sanitize(additionalData);\n      // Prepare the log entry\n      const logEntry = {\n        timestamp: new Date().toISOString(),\n        level,\n        message,\n        ...sanitizedData,\n        // Include some general context, but sanitize sensitive parts\n        context: sanitize({\n          bucketName: this.bucketName,\n          region: this.region,\n          endpoint: this.endpoint,\n          // Only include the first few characters of the access key, if it exists\n          accessKeyId: this.accessKeyId ? `${this.accessKeyId.substring(0, 4)}...` : undefined,\n        }),\n      };\n\n      // Log the sanitized entry\n      this.logger[level](logEntry);\n    }\n  }\n\n  getBucketName = () => this.bucketName;\n  setBucketName = (bucketName: string) => {\n    this.bucketName = bucketName;\n  };\n  getRegion = () => this.region;\n  setRegion = (region: string) => {\n    this.region = region;\n  };\n  getEndpoint = () => this.endpoint;\n  setEndpoint = (endpoint: string) => {\n    this.endpoint = endpoint;\n  };\n  getMaxRequestSizeInBytes = () => this.maxRequestSizeInBytes;\n  setMaxRequestSizeInBytes = (maxRequestSizeInBytes: number) => {\n    this.maxRequestSizeInBytes = maxRequestSizeInBytes;\n  };\n\n  getProps = () => ({\n    accessKeyId: this.accessKeyId,\n    secretAccessKey: this.secretAccessKey,\n    region: this.region,\n    bucket: this.bucketName,\n    endpoint: this.endpoint,\n    maxRequestSizeInBytes: this.maxRequestSizeInBytes,\n    requestAbortTimeout: this.requestAbortTimeout,\n    logger: this.logger,\n  });\n  setProps = (props: S3Config) => {\n    this._validateConstructorParams(props.accessKeyId, props.secretAccessKey, props.bucketName, props.endpoint);\n    this.accessKeyId = props.accessKeyId;\n    this.secretAccessKey = props.secretAccessKey;\n    this.region = props.region || 'auto';\n    this.bucketName = props.bucketName;\n    this.endpoint = props.endpoint;\n    this.maxRequestSizeInBytes = props.maxRequestSizeInBytes || MIN_MAX_REQUEST_SIZE_IN_BYTES;\n    this.requestAbortTimeout = props.requestAbortTimeout;\n    this.logger = props.logger;\n  };\n\n  /**\n   * Get the content length of an object.\n   * @param {string} key - The key of the object.\n   * @returns {Promise<number>} The content length of the object in bytes.\n   * @throws {TypeError} If the key is not a non-empty string.\n   */\n  async getContentLength(key: string): Promise<number> {\n    this._checkKey(key);\n    const headers = {\n      [HEADER_AMZ_CONTENT_SHA256]: UNSIGNED_PAYLOAD,\n    };\n    const encodedKey = uriResourceEscape(key);\n    const { url, headers: signedHeaders } = await this._sign('HEAD', encodedKey, {}, headers, '');\n    const res = await this._sendRequest(url, 'HEAD', signedHeaders);\n    const contentLength = res.headers.get(HEADER_CONTENT_LENGTH);\n    return contentLength ? parseInt(contentLength, 10) : 0;\n  }\n\n  /**\n   * Check if a bucket exists.\n   * @returns {Promise<boolean>} True if the bucket exists, false otherwise.\n   */\n  async bucketExists(): Promise<boolean> {\n    const headers = {\n      [HEADER_AMZ_CONTENT_SHA256]: UNSIGNED_PAYLOAD,\n    };\n    const { url, headers: signedHeaders } = await this._sign('HEAD', '', {}, headers, '');\n    const res = await this._sendRequest(url, 'HEAD', signedHeaders);\n    if (res.ok && res.status === 200) {\n      return true;\n    }\n    return false;\n  }\n\n  // TBD\n  // async createBucket(bucketName) {\n  //   const xmlBody = `\n  //   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n  //     <CreateBucketConfiguration xmlns=\"http://s3.amazonaws.com/doc/2006-03-01/\">\n  //     <LocationConstraint>${this.region}</LocationConstraint>\n  //   </CreateBucketConfiguration>\n  //   `;\n  //   const headers = {\n  //     [HEADER_CONTENT_TYPE]: XML_CONTENT_TYPE,\n  //     [HEADER_CONTENT_LENGTH]: Buffer.byteLength(xmlBody).toString(),\n  //     [HEADER_AMZ_CONTENT_SHA256]: await _hash(xmlBody),\n  //   };\n  //   const encodedKey = encodeURI(bucketName);\n  //   const { url, headers: signedHeaders } = await this._sign('PUT', encodedKey, {}, headers, '');\n  //   const res = await this._sendRequest(url, 'PUT', signedHeaders);\n  //   if (res.ok && res.status === 200) {\n  //     return true;\n  //   }\n  //   return false;\n  // }\n\n  /**\n   * Check if a file exists in the bucket.\n   * @param {string} key - The key of the object.\n   * @returns {Promise<boolean>} True if the file exists, false otherwise.\n   * @throws {TypeError} If the key is not a non-empty string.\n   */\n  async fileExists(key: string): Promise<boolean> {\n    this._checkKey(key);\n    const headers = { [HEADER_AMZ_CONTENT_SHA256]: UNSIGNED_PAYLOAD };\n    const encodedKey = uriResourceEscape(key);\n    const { url, headers: signedHeaders } = await this._sign('HEAD', encodedKey, {}, headers, '');\n    try {\n      const res = await fetch(url, {\n        method: 'HEAD',\n        headers: signedHeaders,\n      });\n      if (res.ok && res.status === 200) return true;\n      else if (res.status === 404) return false;\n      else this._handleErrorResponse(res);\n      return false;\n    } catch (error: unknown) {\n      const errorMessage = error instanceof Error ? error.message : String(error);\n      this._log('error', `${ERROR_PREFIX}Failed to check if file exists: ${errorMessage}`);\n      throw new Error(`${ERROR_PREFIX}Failed to check if file exists: ${errorMessage}`);\n    }\n  }\n  async _sign(\n    method: HttpMethod,\n    keyPath: string,\n    query: Object,\n    headers: Record<string, string | number>,\n    body: string | Buffer,\n  ): Promise<{ url: string; headers: Record<string, any> }> {\n    const datetime = new Date().toISOString().replace(/[:-]|\\.\\d{3}/g, '');\n    const url =\n      typeof keyPath === 'string' && keyPath.length > 0 ? new URL(keyPath, this.endpoint) : new URL(this.endpoint);\n    url.pathname = `/${encodeURI(this.bucketName)}${url.pathname}`;\n    headers[HEADER_AMZ_CONTENT_SHA256] = body ? await _hash(body) : UNSIGNED_PAYLOAD;\n    headers[HEADER_AMZ_DATE] = datetime;\n    headers[HEADER_HOST] = url.host;\n    const canonicalHeaders = this._buildCanonicalHeaders(headers);\n    const signedHeaders = Object.keys(headers)\n      .map(key => key.toLowerCase())\n      .sort()\n      .join(';');\n\n    const canonicalRequest = await this._buildCanonicalRequest(\n      method,\n      url,\n      query,\n      canonicalHeaders,\n      signedHeaders,\n      body,\n    );\n    const stringToSign = await this._buildStringToSign(datetime, canonicalRequest);\n    const signature = await this._calculateSignature(datetime, stringToSign);\n    const authorizationHeader = this._buildAuthorizationHeader(datetime, signedHeaders, signature);\n    headers[HEADER_AUTHORIZATION] = authorizationHeader;\n    return { url: url.toString(), headers };\n  }\n\n  _buildCanonicalHeaders(headers: Record<string, string | number>): string {\n    return Object.entries(headers)\n      .map(([key, value]) => `${key.toLowerCase()}:${String(value).trim()}`)\n      .sort()\n      .join('\\n');\n  }\n\n  async _buildCanonicalRequest(\n    method: HttpMethod,\n    url: URL,\n    query: Object,\n    canonicalHeaders: string,\n    signedHeaders: string,\n    body: string | Buffer,\n  ): Promise<string> {\n    return [\n      method,\n      url.pathname,\n      this._buildCanonicalQueryString(query),\n      `${canonicalHeaders}\\n`,\n      signedHeaders,\n      body ? await _hash(body) : UNSIGNED_PAYLOAD,\n    ].join('\\n');\n  }\n\n  async _buildStringToSign(datetime: string, canonicalRequest: string): Promise<string> {\n    const credentialScope = [datetime.slice(0, 8), this.region, S3_SERVICE, AWS_REQUEST_TYPE].join('/');\n    return [AWS_ALGORITHM, datetime, credentialScope, await _hash(canonicalRequest)].join('\\n');\n  }\n\n  async _calculateSignature(datetime: string, stringToSign: string): Promise<string> {\n    const signingKey = await this._getSignatureKey(datetime.slice(0, 8));\n    return _hmac(signingKey, stringToSign, 'hex');\n  }\n\n  _buildAuthorizationHeader(datetime: string, signedHeaders: string, signature: string): string {\n    const credentialScope = [datetime.slice(0, 8), this.region, S3_SERVICE, AWS_REQUEST_TYPE].join('/');\n    return [\n      `${AWS_ALGORITHM} Credential=${this.accessKeyId}/${credentialScope}`,\n      `SignedHeaders=${signedHeaders}`,\n      `Signature=${signature}`,\n    ].join(', ');\n  }\n\n  /**\n   * List objects in the bucket.\n   * @param {string} [delimiter='/'] - The delimiter to use for grouping objects in specific path.\n   * @param {string} [prefix=''] - The prefix to filter objects in specific path.\n   * @param {number} [maxKeys=1000] - The maximum number of keys to return.\n   * @param {string} [method='GET'] - The HTTP method to use (GET or HEAD).\n   * @param {Object} [opts={}] - Additional options for the list operation.\n   * @returns {Promise<Object|Array>} The list of objects or object metadata.\n   * @throws {TypeError} If any of the parameters are of incorrect type.\n   */\n  async list(\n    delimiter: string = '/',\n    prefix: string = '',\n    maxKeys: number = 1000,\n    method: HttpMethod = 'GET',\n    opts: Object = {},\n  ): Promise<Object | Array<Object>> {\n    this._checkDelimiter(delimiter);\n    this._checkPrefix(prefix);\n    this._checkMaxKeys(maxKeys);\n    this._checkMethodHeadnGet(method);\n    this._checkOpts(opts);\n    this._log('info', `Listing objects in ${prefix}`);\n\n    const query = {\n      'list-type': LIST_TYPE,\n      'max-keys': String(maxKeys),\n      ...opts,\n    } as { [key: string]: any };\n    if (prefix.length > 0) {\n      query['prefix'] = prefix;\n    }\n    const headers = {\n      [HEADER_CONTENT_TYPE]: JSON_CONTENT_TYPE,\n      [HEADER_AMZ_CONTENT_SHA256]: UNSIGNED_PAYLOAD,\n    };\n    const encodedKey = delimiter === '/' ? delimiter : uriEscape(delimiter);\n    const { url, headers: signedHeaders } = await this._sign('GET', encodedKey, query, headers, '');\n    const urlWithQuery = `${url}?${new URLSearchParams(query)}`;\n    const res = await this._sendRequest(urlWithQuery, 'GET', signedHeaders);\n    const responseBody = await res.text();\n\n    if (method === 'HEAD') {\n      const contentLength = res.headers.get(HEADER_CONTENT_LENGTH);\n      const lastModified = res.headers.get(HEADER_LAST_MODIFIED);\n      const etag = res.headers.get(HEADER_ETAG);\n\n      return {\n        size: contentLength ? +contentLength : undefined,\n        mtime: lastModified ? new Date(lastModified) : undefined,\n        ETag: etag || undefined,\n      };\n    }\n\n    const data = _parseXml(responseBody);\n    const output = data.listBucketResult || data.error || data;\n    return output.contents || output;\n  }\n\n  /**\n   * List multipart uploads in the bucket.\n   * @param {string} [delimiter='/'] - The delimiter to use for grouping objects in specific path.\n   * @param {string} [prefix=''] - The prefix to filter objects in specific path.\n   * @param {string} [method='GET'] - The HTTP method to use (GET or HEAD).\n   * @param {Object} [opts={}] - Additional options for the list operation.\n   * @returns {Promise<Object|Array>} The list of objects or object metadata.\n   * @throws {TypeError} If any of the parameters are of incorrect type.\n   */\n  async listMultiPartUploads(\n    delimiter: string = '/',\n    prefix: string = '',\n    method: HttpMethod = 'GET',\n    opts: Object = {},\n  ): Promise<any> {\n    this._checkDelimiter(delimiter);\n    this._checkPrefix(prefix);\n    this._checkMethodHeadnGet(method);\n    this._checkOpts(opts);\n    this._log('info', `Listing multipart uploads in ${prefix}`);\n\n    const query = {\n      uploads: '',\n      ...opts,\n    } as Record<string, any>;\n    const headers = {\n      [HEADER_CONTENT_TYPE]: JSON_CONTENT_TYPE,\n      [HEADER_AMZ_CONTENT_SHA256]: UNSIGNED_PAYLOAD,\n    };\n    const encodedKey = delimiter === '/' ? delimiter : uriEscape(delimiter);\n    const { url, headers: signedHeaders } = await this._sign('GET', encodedKey, query, headers, '');\n    const urlWithQuery = `${url}?${new URLSearchParams(query)}`;\n    const res = await this._sendRequest(urlWithQuery, 'GET', signedHeaders);\n    const responseBody = await res.text();\n\n    if (method === 'HEAD') {\n      return {\n        size: +(res.headers.get(HEADER_CONTENT_LENGTH) ?? '0'),\n        mtime: new Date(res.headers.get(HEADER_LAST_MODIFIED) ?? ''),\n        ETag: res.headers.get(HEADER_ETAG) ?? '',\n      };\n    }\n\n    const data = _parseXml(responseBody);\n    const output = data.listMultipartUploadsResult || data.error || data;\n    return output.uploads || output;\n  }\n\n  /**\n   * Get an object from the bucket.\n   * @param {string} key - The key of the object to get.\n   * @param {Object} [opts={}] - Additional options for the get operation.\n   * @returns {Promise<string>} The content of the object.\n   */\n  async get(key: string, opts: Record<string, any> = {}): Promise<string> {\n    this._checkKey(key);\n    this._log('info', `Getting object ${key}`);\n\n    const headers = {\n      [HEADER_CONTENT_TYPE]: JSON_CONTENT_TYPE,\n      [HEADER_AMZ_CONTENT_SHA256]: UNSIGNED_PAYLOAD,\n    };\n    const encodedKey = uriResourceEscape(key);\n    const { url, headers: signedHeaders } = await this._sign('GET', encodedKey, opts, headers, '');\n    const res = await this._sendRequest(url, 'GET', signedHeaders);\n    return res.text();\n  }\n\n  /**\n   * Get a response of an object from the bucket.\n   * @param {string} key - The key of the object to get.\n   * @param {boolean} [wholeFile=true] - Whether to get the whole file or a part.\n   * @param {number} [rangeFrom=0] - The range from to get if not getting the whole file.\n   * @param {number} [rangeTo=this.maxRequestSizeInBytes] - The range to to get if not getting the whole file. Note: rangeTo is inclusive.\n   * @param {Object} [opts={}] - Additional options for the get operation.\n   * @returns {Promise<Response>} Response of the object content. Use readableStream() to get the stream from .body.\n   */\n  async getResponse(\n    key: string,\n    wholeFile: boolean = true,\n    rangeFrom: number = 0,\n    rangeTo: number = this.maxRequestSizeInBytes,\n    opts: Record<string, any> = {},\n  ): Promise<Response> {\n    this._checkKey(key);\n    const query = opts;\n    const headers = {\n      [HEADER_CONTENT_TYPE]: JSON_CONTENT_TYPE,\n      [HEADER_AMZ_CONTENT_SHA256]: UNSIGNED_PAYLOAD,\n      ...(wholeFile ? {} : { range: `bytes=${rangeFrom}-${rangeTo - 1}` }),\n    };\n    const encodedKey = uriResourceEscape(key);\n    const { url, headers: signedHeaders } = await this._sign('GET', encodedKey, query, headers, '');\n    const urlWithQuery = `${url}?${new URLSearchParams(query)}`;\n\n    return this._sendRequest(urlWithQuery, 'GET', signedHeaders);\n  }\n\n  /**\n   * Put an object into the bucket.\n   * @param {string} key - The key of the object to put. To create a folder, include a trailing slash.\n   * @param {Buffer|string} data - The content of the object to put.\n   * @returns {Promise<Object>} The response from the put operation.\n   * @throws {TypeError} If the key is not a non-empty string or data is not a Buffer or string.\n   */\n  async put(key: string, data: string | Buffer): Promise<Object> {\n    this._checkKey(key);\n    if (!(data instanceof Buffer || typeof data === 'string')) {\n      this._log('error', ERROR_DATA_BUFFER_REQUIRED);\n      throw new TypeError(ERROR_DATA_BUFFER_REQUIRED);\n    }\n    // const encodedKey = encodeURIComponent(key);\n    this._log('info', `Uploading object ${key}`);\n    const contentLength = typeof data === 'string' ? Buffer.byteLength(data) : data.length;\n    const headers = {\n      [HEADER_CONTENT_LENGTH]: contentLength,\n    };\n    const encodedKey = uriResourceEscape(key);\n    const { url, headers: signedHeaders } = await this._sign('PUT', encodedKey, {}, headers, data);\n    const res = await this._sendRequest(url, 'PUT', signedHeaders, data);\n    return res;\n  }\n\n  /**\n   * Initiate a multipart upload.\n   * @param {string} key - The key of the object to upload.\n   * @param {string} [fileType='application/octet-stream'] - The MIME type of the file.\n   * @returns {Promise<string>} The upload ID for the multipart upload.\n   * @throws {TypeError} If the key is not a non-empty string or fileType is not a string.\n   * @throws {Error} If the multipart upload initiation fails.\n   */\n  async getMultipartUploadId(key: string, fileType: string = DEFAULT_STREAM_CONTENT_TYPE): Promise<string> {\n    this._checkKey(key);\n    if (typeof fileType !== 'string') {\n      this._log('error', `${ERROR_PREFIX}fileType must be a string`);\n      throw new TypeError(`${ERROR_PREFIX}fileType must be a string`);\n    }\n    this._log('info', `Initiating multipart upload for object ${key}`);\n    const query = { uploads: '' };\n    const headers = {\n      [HEADER_CONTENT_TYPE]: fileType,\n      [HEADER_AMZ_CONTENT_SHA256]: UNSIGNED_PAYLOAD,\n    };\n\n    const encodedKey = uriResourceEscape(key);\n    const { url, headers: signedHeaders } = await this._sign('POST', encodedKey, query, headers, '');\n    const urlWithQuery = `${url}?${new URLSearchParams(query)}`;\n\n    const res = await this._sendRequest(urlWithQuery, 'POST', signedHeaders);\n    const responseBody = await res.text();\n    const parsedResponse = _parseXml(responseBody);\n\n    if (\n      typeof parsedResponse === 'object' &&\n      parsedResponse !== null &&\n      'error' in parsedResponse &&\n      typeof parsedResponse.error === 'object' &&\n      parsedResponse.error !== null &&\n      'message' in parsedResponse.error\n    ) {\n      const errorMessage = String(parsedResponse.error.message);\n      this._log('error', `${ERROR_PREFIX}Failed to abort multipart upload: ${errorMessage}`);\n      throw new Error(`${ERROR_PREFIX}Failed to abort multipart upload: ${errorMessage}`);\n    }\n\n    if (typeof parsedResponse === 'object' && parsedResponse !== null) {\n      if (!parsedResponse.initiateMultipartUploadResult || !parsedResponse.initiateMultipartUploadResult.uploadId) {\n        this._log('error', `${ERROR_PREFIX}Failed to create multipart upload: no uploadId in response`);\n        throw new Error(`${ERROR_PREFIX}Failed to create multipart upload: Missing upload ID in response`);\n      }\n\n      return parsedResponse.initiateMultipartUploadResult.uploadId;\n    } else {\n      this._log('error', `${ERROR_PREFIX}Failed to create multipart upload: unexpected response format`);\n      throw new Error(`${ERROR_PREFIX}Failed to create multipart upload: Unexpected response format`);\n    }\n  }\n\n  /**\n   * Upload a part in a multipart upload.\n   * @param {string} key - The key of the object being uploaded.\n   * @param {Buffer|string} data - The content of the part.\n   * @param {string} uploadId - The upload ID of the multipart upload.\n   * @param {number} partNumber - The part number.\n   * @param {Object} [opts={}] - Additional options for the upload.\n   * @returns {Promise<Object>} The ETag and part number of the uploaded part.\n   * @throws {TypeError} If any of the parameters are of incorrect type.\n   */\n  async uploadPart(\n    key: string,\n    data: Buffer | string,\n    uploadId: string,\n    partNumber: number,\n    opts: Object = {},\n  ): Promise<UploadPart> {\n    this._validateUploadPartParams(key, data, uploadId, partNumber, opts);\n    const query = { uploadId, partNumber, ...opts } as { [key: string]: any };\n    const headers = {\n      [HEADER_CONTENT_LENGTH]: data.length,\n    } as { [key: string]: any };\n\n    const encodedKey = uriResourceEscape(key);\n    const { url, headers: signedHeaders } = await this._sign('PUT', encodedKey, query, headers, data);\n    const urlWithQuery = `${url}?${new URLSearchParams(query)}`;\n\n    const res = await this._sendRequest(urlWithQuery, 'PUT', signedHeaders, data);\n    const ETag = res.headers.get('etag') || '';\n    return { partNumber, ETag };\n  }\n\n  _validateUploadPartParams(key: string, data: Buffer | string, uploadId: string, partNumber: number, opts: Object) {\n    this._checkKey(key);\n    if (!(data instanceof Buffer || typeof data === 'string')) {\n      this._log('error', ERROR_DATA_BUFFER_REQUIRED);\n      throw new TypeError(ERROR_DATA_BUFFER_REQUIRED);\n    }\n    if (typeof uploadId !== 'string' || uploadId.trim().length === 0) {\n      this._log('error', ERROR_UPLOAD_ID_REQUIRED);\n      throw new TypeError(ERROR_UPLOAD_ID_REQUIRED);\n    }\n    if (!Number.isInteger(partNumber) || partNumber <= 0) {\n      this._log('error', `${ERROR_PREFIX}partNumber must be a positive integer`);\n      throw new TypeError(`${ERROR_PREFIX}partNumber must be a positive integer`);\n    }\n    this._checkOpts(opts);\n  }\n\n  /**\n   * Complete a multipart upload.\n   * @param {string} key - The key of the object being uploaded.\n   * @param {string} uploadId - The upload ID of the multipart upload.\n   * @param {Array<Object>} parts - An array of objects containing PartNumber and ETag for each part.\n   * @returns {Promise<Object>} The result of the complete multipart upload operation.\n   * @throws {TypeError} If any of the parameters are of incorrect type.\n   * @throws {Error} If the complete multipart upload operation fails.\n   */\n  async completeMultipartUpload(\n    key: string,\n    uploadId: string,\n    parts: Array<UploadPart>,\n  ): Promise<CompleteMultipartUploadResult> {\n    this._checkKey(key);\n    if (typeof uploadId !== 'string' || uploadId.trim().length === 0) {\n      this._log('error', ERROR_UPLOAD_ID_REQUIRED);\n      throw new TypeError(ERROR_UPLOAD_ID_REQUIRED);\n    }\n    if (!Array.isArray(parts) || parts.length === 0) {\n      this._log('error', ERROR_PARTS_REQUIRED);\n      throw new TypeError(ERROR_PARTS_REQUIRED);\n    }\n    if (!parts.every(part => typeof part.partNumber === 'number' && typeof part.ETag === 'string')) {\n      this._log('error', ERROR_INVALID_PART);\n      throw new TypeError(ERROR_INVALID_PART);\n    }\n    this._log('info', `Complete multipart upload ${uploadId} for object ${key}`);\n    const query = { uploadId };\n    const xmlBody = this._buildCompleteMultipartUploadXml(parts);\n    const headers = {\n      [HEADER_CONTENT_TYPE]: XML_CONTENT_TYPE,\n      [HEADER_CONTENT_LENGTH]: Buffer.byteLength(xmlBody).toString(),\n      [HEADER_AMZ_CONTENT_SHA256]: await _hash(xmlBody),\n    };\n    const encodedKey = uriResourceEscape(key);\n    const { url, headers: signedHeaders } = await this._sign('POST', encodedKey, query, headers, xmlBody);\n    const urlWithQuery = `${url}?${new URLSearchParams(query)}`;\n\n    const res = await this._sendRequest(urlWithQuery, 'POST', signedHeaders, xmlBody);\n    const responseBody = await res.text();\n    const parsedResponse = _parseXml(responseBody);\n\n    if (\n      typeof parsedResponse === 'object' &&\n      parsedResponse !== null &&\n      'error' in parsedResponse &&\n      typeof parsedResponse.error === 'object' &&\n      parsedResponse.error !== null &&\n      'message' in parsedResponse.error\n    ) {\n      const errorMessage = String(parsedResponse.error.message);\n      this._log('error', `${ERROR_PREFIX}Failed to abort multipart upload: ${errorMessage}`);\n      throw new Error(`${ERROR_PREFIX}Failed to abort multipart upload: ${errorMessage}`);\n    }\n\n    return parsedResponse.completeMultipartUploadResult;\n  }\n\n  /**\n   * Aborts a multipart upload.\n   * @param {string} key - The key of the object being uploaded.\n   * @param {string} uploadId - The ID of the multipart upload to abort.\n   * @returns {Promise<Object>} - A promise that resolves to the abort response.\n   * @throws {Error} If the abort operation fails.\n   */\n  async abortMultipartUpload(key: string, uploadId: string): Promise<object> {\n    // Input validation\n    this._checkKey(key);\n    if (typeof uploadId !== 'string' || uploadId.trim().length === 0) {\n      this._log('error', ERROR_UPLOAD_ID_REQUIRED);\n      throw new TypeError(ERROR_UPLOAD_ID_REQUIRED);\n    }\n\n    this._log('info', `Aborting multipart upload ${uploadId} for object ${key}`);\n\n    // Prepare the request\n    const query = { uploadId };\n    const headers = {\n      [HEADER_CONTENT_TYPE]: XML_CONTENT_TYPE,\n      [HEADER_AMZ_CONTENT_SHA256]: UNSIGNED_PAYLOAD,\n    };\n\n    try {\n      // Sign and send the request\n      const encodedKey = uriResourceEscape(key);\n      const { url, headers: signedHeaders } = await this._sign('DELETE', encodedKey, query, headers, '');\n      const urlWithQuery = `${url}?${new URLSearchParams(query)}`;\n\n      const res = await this._sendRequest(urlWithQuery, 'DELETE', signedHeaders);\n\n      // Check for successful response\n      if (res.ok) {\n        const responseBody = await res.text();\n        const parsedResponse = _parseXml(responseBody);\n\n        if (\n          typeof parsedResponse === 'object' &&\n          parsedResponse !== null &&\n          'error' in parsedResponse &&\n          typeof parsedResponse.error === 'object' &&\n          parsedResponse.error !== null &&\n          'message' in parsedResponse.error\n        ) {\n          const errorMessage = String(parsedResponse.error.message);\n          this._log('error', `${ERROR_PREFIX}Failed to abort multipart upload: ${errorMessage}`);\n          throw new Error(`${ERROR_PREFIX}Failed to abort multipart upload: ${errorMessage}`);\n        }\n\n        return {\n          status: 'Aborted',\n          key,\n          uploadId,\n          response: parsedResponse,\n        };\n      } else {\n        this._log('error', `${ERROR_PREFIX}Abort request failed with status ${res.status}`);\n        throw new Error(`${ERROR_PREFIX}Abort request failed with status ${res.status}`);\n      }\n    } catch (error: unknown) {\n      const errorMessage = error instanceof Error ? error.message : String(error);\n      this._log('error', `${ERROR_PREFIX}Failed to abort multipart upload for key ${key}: ${errorMessage}`);\n      throw new Error(`${ERROR_PREFIX}Failed to abort multipart upload for key ${key}: ${errorMessage}`);\n    }\n  }\n\n  _buildCompleteMultipartUploadXml(parts: Array<UploadPart>): string {\n    return `\n      <CompleteMultipartUpload>\n        ${parts\n          .map(\n            part => `\n          <Part>\n            <PartNumber>${part.partNumber}</PartNumber>\n            <ETag>${part.ETag}</ETag>\n          </Part>\n        `,\n          )\n          .join('')}\n      </CompleteMultipartUpload>\n    `;\n  }\n\n  /**\n   * Delete an object from the bucket.\n   * @param {string} key - The key of the object to delete.\n   * @returns {Promise<string>} The response from the delete operation.\n   */\n  async delete(key: string): Promise<string> {\n    this._checkKey(key);\n    this._log('info', `Deleting object ${key}`);\n    const headers = {\n      [HEADER_CONTENT_TYPE]: JSON_CONTENT_TYPE,\n      [HEADER_AMZ_CONTENT_SHA256]: UNSIGNED_PAYLOAD,\n    };\n    const encodedKey = uriResourceEscape(key);\n    const { url, headers: signedHeaders } = await this._sign('DELETE', encodedKey, {}, headers, '');\n    const res = await this._sendRequest(url, 'DELETE', signedHeaders);\n    return res.text();\n  }\n\n  async _sendRequest(\n    url: string,\n    method: HttpMethod,\n    headers: Record<string, string | any>,\n    body?: string | Buffer,\n  ): Promise<Response> {\n    this._log('info', `Sending ${method} request to ${url}, headers: ${JSON.stringify(headers)}`);\n    const res = await fetch(url, {\n      method,\n      headers,\n      body,\n      signal: this.requestAbortTimeout !== undefined ? AbortSignal.timeout(this.requestAbortTimeout) : undefined,\n    });\n\n    if (!res.ok) {\n      await this._handleErrorResponse(res);\n    }\n\n    return res;\n  }\n\n  async _handleErrorResponse(res: Response) {\n    const errorBody = await res.text();\n    const errorCode = res.headers.get('x-amz-error-code') || 'Unknown';\n    const errorMessage = res.headers.get('x-amz-error-message') || res.statusText;\n    this._log(\n      'error',\n      `${ERROR_PREFIX}Request failed with status ${res.status}: ${errorCode} - ${errorMessage},err body: ${errorBody}`,\n    );\n    throw new Error(\n      `${ERROR_PREFIX}Request failed with status ${res.status}: ${errorCode} - ${errorMessage}, err body: ${errorBody}`,\n    );\n  }\n\n  _buildCanonicalQueryString(queryParams: Object): string {\n    if (Object.keys(queryParams).length < 1) {\n      return '';\n    }\n\n    return Object.keys(queryParams)\n      .sort()\n      .map(key => `${encodeURIComponent(key)}=${encodeURIComponent((queryParams as Record<string, any>)[key])}`)\n      .join('&');\n  }\n  async _getSignatureKey(dateStamp: string): Promise<string> {\n    const kDate = await _hmac(`AWS4${this.secretAccessKey}`, dateStamp);\n    const kRegion = await _hmac(kDate, this.region);\n    const kService = await _hmac(kRegion, S3_SERVICE);\n    return _hmac(kService, AWS_REQUEST_TYPE);\n  }\n}\n\nconst _hash = async (content: string | Buffer): Promise<string> => {\n  const hashSum = _createHash('sha256');\n  hashSum.update(content);\n  return hashSum.digest('hex');\n};\n\nconst _hmac = async (key: string | Buffer, content: string, encoding?: 'hex'): Promise<string> => {\n  const hmacSum = _createHmac('sha256', key);\n  hmacSum.update(content);\n  return hmacSum.digest(encoding);\n};\n\nconst _parseXml = (str: string): string | object | any => {\n  const unescapeXml = (value: string): string => {\n    return value\n      .replace(/&quot;/g, '\"')\n      .replace(/&apos;/g, \"'\")\n      .replace(/&lt;/g, '<')\n      .replace(/&gt;/g, '>')\n      .replace(/&amp;/g, '&');\n  };\n\n  const json = {};\n  const re = /<(\\w)([-\\w]+)(?:\\/|[^>]*>((?:(?!<\\1)[\\s\\S])*)<\\/\\1\\2)>/gm;\n  let match;\n\n  while ((match = re.exec(str))) {\n    const [, prefix, key, value] = match;\n    const fullKey = prefix.toLowerCase() + key;\n    const parsedValue = value != null ? _parseXml(value) : true;\n\n    if (typeof parsedValue === 'string') {\n      (json as { [key: string]: any })[fullKey] = unescapeXml(parsedValue);\n    } else if (Array.isArray((json as { [key: string]: any })[fullKey])) {\n      (json as { [key: string]: any })[fullKey].push(parsedValue);\n    } else {\n      (json as { [key: string]: any })[fullKey] =\n        (json as { [key: string]: any })[fullKey] != null\n          ? [(json as { [key: string]: any })[fullKey], parsedValue]\n          : expectArray[fullKey]\n            ? [parsedValue]\n            : parsedValue;\n    }\n  }\n\n  return Object.keys(json).length ? json : unescapeXml(str);\n};\n\nexport { S3 };\nexport default S3;\n", "'use strict';\n\nimport { S3 } from 'ultralight-s3';\nimport avro from 'avro-js'; // eslint-disable-line\nimport {\n\tlowstorage_ERROR_CODES,\n\tlowstorageError,\n\tCollectionNotFoundError,\n\tSchemaValidationError,\n\tDocumentValidationError,\n\tS3OperationError,\n} from './errors.js';\nimport { matchesQuery, generateUUID, inferAvroType } from './helpers.js';\n\nconst MODULE_NAME = 'lowstorage';\nconst DEFAULT_DELIMITER = '/';\nconst PROJECT_DIR_PREFIX = 'lowstorage';\nconst COL_SUFFIX = '.avro';\nconst CHUNG_1MB = 1024 * 1024;\nconst CHUNG_5MB = 5 * CHUNG_1MB;\n\n// code / description\n// init of new collection is automatically creating it in the bucket\n// there is optional (opt-in) switch to create new collections in bucket\n// if the schema is not provided, it will create empty buffer and save it\n// if the schema is provided, it will save it in memory and use it for all ops\n// if the schema is updated, it will save it in memory and use it for all ops\n// exposed functions are:\n// listCollections \u2705\n// collectionExists \u2705\n// createCollection \u2705\n// removeCollection \u2705\n// renameCollection \u2705\n// updateCollectionSchema \u274C\n// collection \u2705\n// s3 \u2705\n\n// Operations over collections are:\n// insert \u2705\n// find \u2705\n// findOne \u2705\n// update \u2705\n// updateOne \u2705\n// delete \u2705\n// count \u2705\n\n// Errors:\n// lowstorageError \u2705\n// CollectionNotFoundError \u2705\n// SchemaValidationError \u2705\n// DocumentValidationError \u2705\n// S3OperationError \u2705\n\nclass lowstorage {\n\tconstructor(\n\t\toptions = {\n\t\t\taccessKeyId: undefined,\n\t\t\tsecretAccessKey: undefined,\n\t\t\tendpoint: undefined,\n\t\t\tbucketName: undefined,\n\t\t\tregion: 'auto',\n\t\t\tlogger: null,\n\t\t\tdirPrefix: PROJECT_DIR_PREFIX,\n\t\t},\n\t) {\n\t\tthis._checkArgs(options);\n\t\tthis._schemas = new Map();\n\t\tthis._s3 = new S3(options);\n\t\tthis._dirPrefix = options.dirPrefix || PROJECT_DIR_PREFIX;\n\t\tthis._avro = avro;\n\t}\n\n\t_checkArgs = (args) => {\n\t\tconst requiredFields = ['accessKeyId', 'secretAccessKey', 'endpoint', 'bucketName'];\n\t\tfor (const field of requiredFields) {\n\t\t\tif (!args[field]) {\n\t\t\t\tthrow new lowstorageError(`${MODULE_NAME}: ${field} is required`, lowstorage_ERROR_CODES.MISSING_ARGUMENT);\n\t\t\t}\n\t\t}\n\t};\n\n\t_hasColName = (colName) => {\n\t\tif (colName.trim() === '' || colName === null || typeof colName === 'undefined') {\n\t\t\tthrow new lowstorageError(`${MODULE_NAME}: Collection name is required`, lowstorage_ERROR_CODES.MISSING_ARGUMENT);\n\t\t}\n\t};\n\n\tasync listCollections() {\n\t\ttry {\n\t\t\tconst listed = await this._s3.list(DEFAULT_DELIMITER, this._dirPrefix);\n\t\t\tif (typeof listed === 'object' && listed !== null && listed.keyCount === '0') return [];\n\t\t\t// remove the delimiter from the key\n\t\t\treturn listed.map((entry) => entry.key.slice(this._dirPrefix.length + 1, -COL_SUFFIX.length));\n\t\t} catch (error) {\n\t\t\tthrow new S3OperationError(`${MODULE_NAME}: ${error.message}`, lowstorage_ERROR_CODES.S3_OPERATION_ERROR);\n\t\t}\n\t}\n\n\tasync collectionExists(colName) {\n\t\ttry {\n\t\t\tthis._hasColName(colName);\n\t\t\tconst exists = await this._s3.fileExists(`${this._dirPrefix}${DEFAULT_DELIMITER}${colName}${COL_SUFFIX}`);\n\t\t\treturn exists;\n\t\t} catch (error) {\n\t\t\tif (error.message.includes('Not Found')) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tthrow new lowstorageError(`${MODULE_NAME}: ${error.message}`, lowstorage_ERROR_CODES.COLLECTION_NOT_FOUND);\n\t\t}\n\t}\n\n\tasync createCollection(colName, schema, data = []) {\n\t\ttry {\n\t\t\tthis._hasColName(colName);\n\t\t\tconst exists = await this.collectionExists(colName);\n\t\t\tif (!exists) {\n\t\t\t\tawait this._s3.put(`${this._dirPrefix}${DEFAULT_DELIMITER}${colName}${COL_SUFFIX}`, data.length > 0 ? data : '');\n\t\t\t\treturn this.collection(colName, schema);\n\t\t\t}\n\t\t\tthrow new lowstorageError(`${MODULE_NAME}: Collection ${colName} already exists`, lowstorage_ERROR_CODES.COLLECTION_EXISTS);\n\t\t} catch (error) {\n\t\t\tif (error instanceof lowstorageError) {\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t\tthrow new lowstorageError(`${MODULE_NAME}: ${error.message}`, lowstorage_ERROR_CODES.CREATE_COLLECTION_ERROR);\n\t\t}\n\t}\n\n\tasync removeCollection(colName) {\n\t\ttry {\n\t\t\tthis._hasColName(colName);\n\t\t\tconst KEY = `${this._dirPrefix}${DEFAULT_DELIMITER}${colName}${COL_SUFFIX}`;\n\t\t\tconst exists = await this.collectionExists(colName);\n\t\t\tif (exists) {\n\t\t\t\tawait this._s3.delete(KEY);\n\t\t\t\tconst exists2 = await this.collectionExists(colName);\n\t\t\t\tif (typeof exists2 === 'boolean') {\n\t\t\t\t\treturn !exists2;\n\t\t\t\t}\n\t\t\t\tthrow new S3OperationError(`${MODULE_NAME}: Failed to delete collection ${colName}`, lowstorage_ERROR_CODES.S3_OPERATION_ERROR);\n\t\t\t}\n\t\t\tthrow new lowstorageError(`${MODULE_NAME}: Collection ${colName} does not exist`, lowstorage_ERROR_CODES.REMOVE_COLLECTION_ERROR);\n\t\t} catch (error) {\n\t\t\tif (error instanceof S3OperationError) {\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t\tthrow new lowstorageError(\n\t\t\t\t`${MODULE_NAME}: Failed to remove collection: ${error.message}`,\n\t\t\t\tlowstorage_ERROR_CODES.REMOVE_COLLECTION_ERROR,\n\t\t\t);\n\t\t}\n\t}\n\n\tasync renameCollection(oldColName, newColName) {\n\t\ttry {\n\t\t\tthis._hasColName(oldColName);\n\t\t\tthis._hasColName(newColName);\n\t\t\tconst exists = await this.collectionExists(oldColName);\n\t\t\tif (!exists) {\n\t\t\t\tthrow new CollectionNotFoundError(\n\t\t\t\t\t`${MODULE_NAME}: Collection ${oldColName} does not exist`,\n\t\t\t\t\tlowstorage_ERROR_CODES.COLLECTION_NOT_FOUND,\n\t\t\t\t);\n\t\t\t}\n\t\t\tconst oldCol = await this.collection(oldColName);\n\t\t\tconst oldColData = await oldCol._loadDataBuffer();\n\t\t\tconst success = await this.removeCollection(oldColName);\n\t\t\tif (!success) {\n\t\t\t\tthrow new lowstorageError(`${MODULE_NAME}: Failed to rename collection`, lowstorage_ERROR_CODES.RENAME_COLLECTION_ERROR);\n\t\t\t}\n\t\t\treturn await this.createCollection(newColName, oldCol._avroType, oldColData);\n\t\t} catch (error) {\n\t\t\tif (error instanceof lowstorageError) {\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t\tthrow new lowstorageError(\n\t\t\t\t`${MODULE_NAME}: Rename collection failed: ${error.message}`,\n\t\t\t\tlowstorage_ERROR_CODES.RENAME_COLLECTION_ERROR,\n\t\t\t);\n\t\t}\n\t}\n\n\t// TODO: update collection schema\n\t// async updateCollectionSchema(colName, newSchema) {\n\t// \ttry {\n\t// \t\tthis._hasColName(colName);\n\t// \t\t// Check if collection exists\n\t// \t\tconst exists = await this.collectionExists(colName);\n\t// \t\tif (!exists) {\n\t// \t\t\tthrow new CollectionNotFoundError(`${MODULE_NAME}: Collection ${colName} does not exist`, lowstorage_ERROR_CODES.COLLECTION_NOT_FOUND);\n\t// \t\t}\n\t// \t\tif (typeof schema === 'undefined' || schema === null) {\n\t// \t\t\tthrow new lowstorageError(`${MODULE_NAME}: Schema is required`, lowstorage_ERROR_CODES.MISSING_ARGUMENT);\n\t// \t\t}\n\t// \t\tconst col = this.collection(colName);\n\t// \t\tconst colData = await col._loadDataBuffer();\n\t// \t\tconst avroType = this._avro.parse(schema);\n\t// \t\tthis._schemas.set(colName, avroType);\n\n\t// \t} catch (error) {\n\t// \t\tif (error instanceof S3OperationError) {\n\t// \t\t\tthrow error;\n\t// \t\t}\n\t// \t\tthrow new lowstorageError(\n\t// \t\t\t`${MODULE_NAME}: Failed to update collection schema: ${error.message}`,\n\t// \t\t\tlowstorage_ERROR_CODES.UPDATE_COLLECTION_SCHEMA_ERROR,\n\t// \t\t);\n\t// \t}\n\t// }\n\n\tasync collection(colName, schema, autoCreate = true) {\n\t\ttry {\n\t\t\tthis._hasColName(colName);\n\t\t\tconst colPath = `${this._dirPrefix}${DEFAULT_DELIMITER}${colName}${COL_SUFFIX}`;\n\t\t\tlet avroType;\n\n\t\t\tconst exists = await this._s3.fileExists(colPath);\n\n\t\t\tif (!exists && !autoCreate) {\n\t\t\t\tthrow new lowstorageError(`${MODULE_NAME}: Collection ${colName} does not exist`, lowstorage_ERROR_CODES.COLLECTION_NOT_FOUND);\n\t\t\t}\n\n\t\t\tif (schema) {\n\t\t\t\tavroType = this._avro.parse(schema);\n\t\t\t\tthis._schemas.set(colName, avroType);\n\t\t\t\tif (!exists && autoCreate) {\n\t\t\t\t\tawait this._s3.put(colPath, '');\n\t\t\t\t}\n\t\t\t} else if (this._schemas.has(colName)) {\n\t\t\t\tavroType = this._schemas.get(colName);\n\t\t\t} else if (exists) {\n\t\t\t\tconst schemaContent = await this._s3.get(colPath);\n\t\t\t\tavroType = this._avro.parse(schemaContent);\n\t\t\t\tthis._schemas.set(colName, avroType);\n\t\t\t} else if (autoCreate) {\n\t\t\t\tawait this._s3.put(colPath, '');\n\t\t\t}\n\n\t\t\treturn new Collection(colName, this._s3, avroType, this._dirPrefix);\n\t\t} catch (error) {\n\t\t\t// check if error message contains \"unknown type\" and if so, throw a schema validation error\n\t\t\tif (error.message.includes('unknown type')) {\n\t\t\t\tthrow new SchemaValidationError(\n\t\t\t\t\t`${MODULE_NAME}: Schema input is invalid: ${error.message}`,\n\t\t\t\t\tlowstorage_ERROR_CODES.SCHEMA_VALIDATION_ERROR,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tthrow new lowstorageError(`${MODULE_NAME}: ${error.message}`, lowstorage_ERROR_CODES.COLLECTION_NOT_FOUND);\n\t\t}\n\t}\n\n\ts3 = () => {\n\t\treturn this._s3;\n\t};\n}\n\nclass Collection {\n\tconstructor(colName, s3, avroType = undefined, dirPrefix = PROJECT_DIR_PREFIX) {\n\t\tthis._colName = colName;\n\t\tthis._s3 = s3;\n\t\tthis._avro = avro;\n\t\tthis._avroType = avroType;\n\t\tthis._dirPrefix = dirPrefix;\n\t}\n\n\tasync insert(doc, schema = undefined) {\n\t\ttry {\n\t\t\tif (doc === undefined || doc === null) {\n\t\t\t\tthrow new lowstorageError(`${MODULE_NAME}: Document is required for insert`, lowstorage_ERROR_CODES.INSERT_ERROR);\n\t\t\t}\n\t\t\tif (typeof doc !== 'object' && !Array.isArray(doc)) {\n\t\t\t\tthrow new DocumentValidationError(\n\t\t\t\t\t`${MODULE_NAME}: Document must be an object or an array`,\n\t\t\t\t\tlowstorage_ERROR_CODES.DOCUMENT_VALIDATION_ERROR,\n\t\t\t\t);\n\t\t\t}\n\t\t\tconst items = !Array.isArray(doc) ? [doc] : doc;\n\n\t\t\tconst avroType = !!schema ? this._avro.parse(schema) : this._avroType || this._avro.parse(inferAvroType(doc));\n\n\t\t\tif (!avroType) {\n\t\t\t\tthrow new SchemaValidationError(\n\t\t\t\t\t`${MODULE_NAME}: Schema is required - Pass a schema to the insert method`,\n\t\t\t\t\tlowstorage_ERROR_CODES.SCHEMA_VALIDATION_ERROR,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tthis._avroType = avroType;\n\t\t\tconst wrapperType = this._avro.parse({ type: 'array', items: this._avroType });\n\t\t\tconst bufferData = await this._loadDataBuffer();\n\t\t\tconst data = bufferData.length > 0 ? wrapperType.fromBuffer(bufferData) : [];\n\t\t\tfor (let item of items) {\n\t\t\t\tif (typeof item !== 'object' || item === null) {\n\t\t\t\t\tthrow new DocumentValidationError(\n\t\t\t\t\t\t`${MODULE_NAME}: Invalid input: input must be an object or an array of objects`,\n\t\t\t\t\t\tlowstorage_ERROR_CODES.DOCUMENT_VALIDATION_ERROR,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\titem._id = item._id || (await generateUUID());\n\t\t\t\tconst valid = this._avroType.isValid(item);\n\t\t\t\tif (!valid) {\n\t\t\t\t\tthrow new DocumentValidationError(`${MODULE_NAME}: Invalid document or schema`, lowstorage_ERROR_CODES.DOCUMENT_VALIDATION_ERROR);\n\t\t\t\t}\n\t\t\t\tdata.push(item);\n\t\t\t}\n\t\t\tconst success = await this._saveDataBuffer(wrapperType.toBuffer(data));\n\t\t\tif (!success) {\n\t\t\t\tthrow new S3OperationError(`${MODULE_NAME}: Failed to insert document`, lowstorage_ERROR_CODES.S3_OPERATION_ERROR);\n\t\t\t}\n\t\t\treturn items;\n\t\t} catch (error) {\n\t\t\tif (error.message.includes('unknown type')) {\n\t\t\t\tthrow new SchemaValidationError(\n\t\t\t\t\t`${MODULE_NAME}: Schema input is invalid: ${error.message}`,\n\t\t\t\t\tlowstorage_ERROR_CODES.SCHEMA_VALIDATION_ERROR,\n\t\t\t\t);\n\t\t\t}\n\t\t\tif (error instanceof lowstorageError) {\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t\tthrow new lowstorageError(`${MODULE_NAME} Insert operation failed: ${error.message}`, lowstorage_ERROR_CODES.INSERT_ERROR);\n\t\t}\n\t}\n\n\tasync _loadDataBuffer() {\n\t\ttry {\n\t\t\tconst KEY = `${this._dirPrefix}${DEFAULT_DELIMITER}${this._colName}${COL_SUFFIX}`;\n\t\t\tconst CHUNK_SIZE = this._s3.getMaxRequestSizeInBytes() || CHUNG_5MB;\n\t\t\tlet firstData = await this._s3.get(KEY);\n\t\t\tif (firstData.length < CHUNK_SIZE) {\n\t\t\t\treturn Buffer.from(firstData, 'utf8');\n\t\t\t}\n\t\t\tlet offset = CHUNK_SIZE;\n\t\t\tlet bufferArr = [Buffer.from(firstData, 'utf8')];\n\t\t\tlet repeat = true;\n\t\t\twhile (repeat) {\n\t\t\t\tconst nextDataResponse = await this._s3.getResponse(KEY, false, offset, offset + CHUNK_SIZE);\n\t\t\t\tconst nextDataBody = await nextDataResponse.text();\n\t\t\t\tbufferArr.push(Buffer.from(nextDataBody, 'utf8'));\n\t\t\t\toffset += CHUNK_SIZE;\n\t\t\t\tconst contentLength = nextDataResponse.headers.get('content-length') || nextDataBody.length;\n\t\t\t\tif (contentLength < CHUNK_SIZE) {\n\t\t\t\t\trepeat = false;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn Buffer.concat(bufferArr);\n\t\t} catch (error) {\n\t\t\tif (error.toString().indexOf('status 404: Unknown - Not Found') > -1) {\n\t\t\t\treturn Buffer.from('');\n\t\t\t}\n\t\t\tthrow new S3OperationError(`${MODULE_NAME}: Failed to load data buffer: ${error.message}`, lowstorage_ERROR_CODES.S3_OPERATION_ERROR);\n\t\t}\n\t}\n\n\tasync _saveDataBuffer(data) {\n\t\ttry {\n\t\t\tconst KEY = `${this._dirPrefix}${DEFAULT_DELIMITER}${this._colName}${COL_SUFFIX}`;\n\t\t\tconst resp = await this._s3.put(KEY, data);\n\t\t\tif (resp.status !== 200) {\n\t\t\t\tthrow new S3OperationError(`${MODULE_NAME}: Failed to save data`, lowstorage_ERROR_CODES.S3_OPERATION_ERROR);\n\t\t\t}\n\t\t\treturn true;\n\t\t} catch (error) {\n\t\t\tif (error instanceof S3OperationError) {\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t\tthrow new lowstorageError(`${MODULE_NAME}: ${error.message}`, lowstorage_ERROR_CODES.SAVE_DATA_ERROR);\n\t\t}\n\t}\n\n\tasync find(query = {}, options = {}) {\n\t\ttry {\n\t\t\tif (query === undefined || query === null) {\n\t\t\t\tthrow new lowstorageError(`${MODULE_NAME}: Query is required for update`, lowstorage_ERROR_CODES.MISSING_ARGUMENT);\n\t\t\t}\n\t\t\tconst bufferData = await this._loadDataBuffer(); // load data from s3\n\t\t\tif (bufferData.length === 0) {\n\t\t\t\treturn [];\n\t\t\t}\n\t\t\tconst wrapperType = this._avro.parse({ type: 'array', items: this._avroType });\n\t\t\tconst data = bufferData.length > 0 ? wrapperType.fromBuffer(bufferData) : [];\n\t\t\tconst start = parseInt(options.skip, 10) || 0;\n\t\t\tconst end = parseInt(options.limit, 10) ? start + parseInt(options.limit, 10) : undefined;\n\t\t\tconst filteredData = data.filter((doc) => matchesQuery(doc, query)).slice(start, end);\n\t\t\treturn filteredData;\n\t\t} catch (error) {\n\t\t\tthrow new lowstorageError(`${MODULE_NAME}: Find operation failed: ${error.message}`, lowstorage_ERROR_CODES.FIND_ERROR);\n\t\t}\n\t}\n\n\tasync findOne(query = {}) {\n\t\ttry {\n\t\t\tif (query === undefined || query === null) {\n\t\t\t\tthrow new lowstorageError(`${MODULE_NAME}: Query is required for update`, lowstorage_ERROR_CODES.MISSING_ARGUMENT);\n\t\t\t}\n\t\t\tconst result = await this.find(query);\n\t\t\treturn result[0] || [];\n\t\t} catch (error) {\n\t\t\tthrow new lowstorageError(`${MODULE_NAME}: FindOne operation failed: ${error.message}`, lowstorage_ERROR_CODES.FIND_ONE_ERROR);\n\t\t}\n\t}\n\n\tasync update(query = {}, update = {}) {\n\t\ttry {\n\t\t\tif (query === undefined || query === null || update === undefined || update === null) {\n\t\t\t\tthrow new lowstorageError(`${MODULE_NAME}: Query is required for update`, lowstorage_ERROR_CODES.MISSING_ARGUMENT);\n\t\t\t}\n\t\t\tif (!this._avroType) {\n\t\t\t\tthrow new SchemaValidationError(\n\t\t\t\t\t`${MODULE_NAME}: Schema is not defined for this collection`,\n\t\t\t\t\tlowstorage_ERROR_CODES.SCHEMA_VALIDATION_ERROR,\n\t\t\t\t);\n\t\t\t}\n\t\t\tconst bufferData = await this._loadDataBuffer(); // load data from s3\n\t\t\tif (bufferData.length === 0) return 0;\n\t\t\tconst wrapperType = this._avro.parse({ type: 'array', items: this._avroType });\n\t\t\tconst data = bufferData.length > 0 ? wrapperType.fromBuffer(bufferData) : [];\n\t\t\tlet updatedCount = 0;\n\n\t\t\tfor (let i = 0; i < data.length; i++) {\n\t\t\t\tif (matchesQuery(data[i], query)) {\n\t\t\t\t\tconst updatedDoc = { ...data[i], ...update };\n\t\t\t\t\tconst valid = this._avroType.isValid(updatedDoc);\n\t\t\t\t\tif (!valid) {\n\t\t\t\t\t\tthrow new DocumentValidationError(\n\t\t\t\t\t\t\t`${MODULE_NAME}: Invalid document or schema`,\n\t\t\t\t\t\t\tlowstorage_ERROR_CODES.DOCUMENT_VALIDATION_ERROR,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\tdata[i] = updatedDoc;\n\t\t\t\t\tupdatedCount++;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (updatedCount > 0) {\n\t\t\t\tconst success = await this._saveDataBuffer(wrapperType.toBuffer(data));\n\t\t\t\tif (!success) {\n\t\t\t\t\tthrow new S3OperationError(`${MODULE_NAME}: Failed to update document`, lowstorage_ERROR_CODES.S3_OPERATION_ERROR);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn updatedCount;\n\t\t} catch (error) {\n\t\t\tif (error instanceof S3OperationError) {\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t\tthrow new lowstorageError(`${MODULE_NAME}: Update operation failed: ${error.message}`, lowstorage_ERROR_CODES.UPDATE_ERROR);\n\t\t}\n\t}\n\n\tasync updateOne(query = {}, update = {}) {\n\t\ttry {\n\t\t\tif (query === undefined || query === null || update === undefined || update === null) {\n\t\t\t\tthrow new lowstorageError(`${MODULE_NAME}: Query is required`, lowstorage_ERROR_CODES.MISSING_ARGUMENT);\n\t\t\t}\n\t\t\tif (!this._avroType) {\n\t\t\t\tthrow new SchemaValidationError(\n\t\t\t\t\t`${MODULE_NAME}: Schema is not defined for this collection`,\n\t\t\t\t\tlowstorage_ERROR_CODES.SCHEMA_VALIDATION_ERROR,\n\t\t\t\t);\n\t\t\t}\n\t\t\tconst bufferData = await this._loadDataBuffer(); // load data from s3\n\t\t\tif (bufferData.length === 0) return 0;\n\t\t\tconst wrapperType = this._avro.parse({ type: 'array', items: this._avroType });\n\t\t\tconst data = bufferData.length > 0 ? wrapperType.fromBuffer(bufferData) : [];\n\t\t\tconst docIndex = data.findIndex((doc) => matchesQuery(doc, query));\n\n\t\t\tif (docIndex !== -1) {\n\t\t\t\tconst updatedDoc = { ...data[docIndex], ...update };\n\t\t\t\tconst valid = this._avroType.isValid(updatedDoc);\n\t\t\t\tif (!valid) {\n\t\t\t\t\tthrow new DocumentValidationError(`${MODULE_NAME}: Invalid document or schema`, lowstorage_ERROR_CODES.DOCUMENT_VALIDATION_ERROR);\n\t\t\t\t}\n\t\t\t\tdata[docIndex] = updatedDoc;\n\t\t\t\tconst success = await this._saveDataBuffer(wrapperType.toBuffer(data));\n\t\t\t\tif (!success) {\n\t\t\t\t\tthrow new S3OperationError(`${MODULE_NAME}: Failed to update document`, lowstorage_ERROR_CODES.S3_OPERATION_ERROR);\n\t\t\t\t}\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t\treturn 0;\n\t\t} catch (error) {\n\t\t\tif (error instanceof lowstorageError) {\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t\tthrow new lowstorageError(`${MODULE_NAME}: UpdateOne operation failed: ${error.message}`, lowstorage_ERROR_CODES.UPDATE_ONE_ERROR);\n\t\t}\n\t}\n\n\tasync delete(query = {}) {\n\t\ttry {\n\t\t\tif (query === undefined || query === null) {\n\t\t\t\tthrow new lowstorageError(`${MODULE_NAME}: Query is required`, lowstorage_ERROR_CODES.MISSING_ARGUMENT);\n\t\t\t}\n\t\t\tconst bufferData = await this._loadDataBuffer(); // load data from s3\n\t\t\tif (bufferData.length === 0) return 0;\n\t\t\tconst wrapperType = this._avro.parse({ type: 'array', items: this._avroType });\n\t\t\tconst data = bufferData.length > 0 ? wrapperType.fromBuffer(bufferData) : [];\n\t\t\tconst initialLength = data.length;\n\t\t\tconst newData = data.filter((doc) => !matchesQuery(doc, query));\n\t\t\tconst success = await this._saveDataBuffer(wrapperType.toBuffer(newData));\n\t\t\tif (!success) {\n\t\t\t\tthrow new S3OperationError(`${MODULE_NAME}: Failed to delete document`, lowstorage_ERROR_CODES.S3_OPERATION_ERROR);\n\t\t\t}\n\t\t\treturn initialLength - newData.length;\n\t\t} catch (error) {\n\t\t\tif (error instanceof S3OperationError) {\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t\tthrow new lowstorageError(`${MODULE_NAME}: Delete operation failed: ${error.message}`, lowstorage_ERROR_CODES.DELETE_ERROR);\n\t\t}\n\t}\n\n\tasync deleteAll() {\n\t\ttry {\n\t\t\tconst bufferData = await this._loadDataBuffer(); // load data from s3\n\t\t\tif (bufferData.length === 0) return 0;\n\t\t\tconst wrapperType = this._avro.parse({ type: 'array', items: this._avroType });\n\t\t\tconst data = bufferData.length > 0 ? wrapperType.fromBuffer(bufferData) : [];\n\t\t\tconst initialLength = data.length;\n\t\t\tconst newData = data.filter((doc) => !matchesQuery(doc, {}));\n\t\t\tconst success = await this._saveDataBuffer(wrapperType.toBuffer(newData));\n\t\t\tif (!success) {\n\t\t\t\tthrow new S3OperationError(`${MODULE_NAME}: Failed to delete document`, lowstorage_ERROR_CODES.S3_OPERATION_ERROR);\n\t\t\t}\n\t\t\treturn initialLength - newData.length;\n\t\t} catch (error) {\n\t\t\tif (error instanceof S3OperationError) {\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t\tthrow new lowstorageError(`${MODULE_NAME}: Delete operation failed: ${error.message}`, lowstorage_ERROR_CODES.DELETE_ERROR);\n\t\t}\n\t}\n\n\tasync count(query = {}) {\n\t\ttry {\n\t\t\tconst data = await this.find(query);\n\t\t\treturn data.length;\n\t\t} catch (error) {\n\t\t\tthrow new lowstorageError(`${MODULE_NAME}: Count operation failed: ${error.message}`, lowstorage_ERROR_CODES.COUNT_ERROR);\n\t\t}\n\t}\n}\n\n// export default lowstorage;\nexport { lowstorage, lowstorageError, lowstorage_ERROR_CODES };\n", "'use strict';\n\nconst lowstorage_ERROR_CODES = {\n\tMISSING_ARGUMENT: 'MISSING_ARGUMENT',\n\tCOLLECTION_EXISTS: 'COLLECTION_EXISTS',\n\tCREATE_COLLECTION_ERROR: 'CREATE_COLLECTION_ERROR',\n\tRENAME_COLLECTION_ERROR: 'RENAME_COLLECTION_ERROR',\n\tREMOVE_COLLECTION_ERROR: 'REMOVE_COLLECTION_ERROR',\n\tUPDATE_COLLECTION_SCHEMA_ERROR: 'UPDATE_COLLECTION_SCHEMA_ERROR',\n\tCOLLECTION_NOT_FOUND: 'COLLECTION_NOT_FOUND',\n\tSCHEMA_VALIDATION_ERROR: 'SCHEMA_VALIDATION_ERROR',\n\tDOCUMENT_VALIDATION_ERROR: 'DOCUMENT_VALIDATION_ERROR',\n\tS3_OPERATION_ERROR: 'S3_OPERATION_ERROR',\n\tFIND_ERROR: 'FIND_ERROR',\n\tFIND_ONE_ERROR: 'FIND_ONE_ERROR',\n\tSAVE_DATA_ERROR: 'SAVE_DATA_ERROR',\n\tINSERT_ERROR: 'INSERT_ERROR',\n\tUPDATE_ERROR: 'UPDATE_ERROR',\n\tUPDATE_ONE_ERROR: 'UPDATE_ONE_ERROR',\n\tDELETE_ERROR: 'DELETE_ERROR',\n\tCOUNT_ERROR: 'COUNT_ERROR',\n\tUNKNOWN_ERROR: 'UNKNOWN_ERROR',\n};\nclass lowstorageError extends Error {\n\tconstructor(message, code = lowstorage_ERROR_CODES.UNKNOWN_ERROR) {\n\t\tsuper(`lowstorageError: ${message} :: code: ${code}`);\n\t\tthis.name = this.constructor.name;\n\t\tthis.code = code;\n\t\tError.captureStackTrace(this, this.constructor);\n\t}\n}\n\nclass CollectionNotFoundError extends lowstorageError {\n\tconstructor(collectionName) {\n\t\tsuper(`Collection ${collectionName} not found`, lowstorage_ERROR_CODES.COLLECTION_NOT_FOUND);\n\t}\n}\n\nclass SchemaValidationError extends lowstorageError {\n\tconstructor(message) {\n\t\tsuper(message, lowstorage_ERROR_CODES.SCHEMA_VALIDATION_ERROR);\n\t}\n}\n\nclass DocumentValidationError extends lowstorageError {\n\tconstructor(message) {\n\t\tsuper(message, lowstorage_ERROR_CODES.DOCUMENT_VALIDATION_ERROR);\n\t}\n}\n\nclass S3OperationError extends lowstorageError {\n\tconstructor(message, operation) {\n\t\tsuper(`S3 ${operation} operation failed: ${message}`, lowstorage_ERROR_CODES.S3_OPERATION_ERROR);\n\t}\n}\n\nexport {\n\tlowstorage_ERROR_CODES,\n\tlowstorageError,\n\tCollectionNotFoundError,\n\tSchemaValidationError,\n\tDocumentValidationError,\n\tS3OperationError,\n};\n", "'use strict';\n\nimport { randomUUID } from 'node:crypto';\n\nconst matchesQuery = (document, query) => {\n\treturn Object.keys(query).every((key) => document[key] === query[key]);\n};\n\nconst generateUUID = async () => {\n\tif (typeof randomUUID !== 'undefined' && typeof randomUUID === 'function') {\n\t\treturn randomUUID();\n\t}\n\tif (typeof crypto !== 'undefined' && typeof crypto === 'object' && typeof crypto.randomUUID === 'function') {\n\t\treturn crypto.randomUUID();\n\t}\n\treturn 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n\t\tvar r = (Math.random() * 16) | 0,\n\t\t\tv = c === 'x' ? r : (r & 0x3) | 0x8;\n\t\treturn v.toString(16);\n\t});\n};\n\nconst _getAvroType = (value, name = 'SubAutoGenerated') => {\n\tswitch (typeof value) {\n\t\tcase 'string':\n\t\t\tif (_isUUID(value)) {\n\t\t\t\treturn {\n\t\t\t\t\ttype: 'string',\n\t\t\t\t\tname: '_id',\n\t\t\t\t\tsize: 16,\n\t\t\t\t\tlogicalType: 'UUID',\n\t\t\t\t};\n\t\t\t}\n\t\t\treturn 'string';\n\t\tcase 'number':\n\t\t\treturn Number.isInteger(value) ? 'int' : 'float';\n\t\tcase 'boolean':\n\t\t\treturn 'boolean';\n\t\tcase 'object':\n\t\t\tif (value === null) return 'null';\n\t\t\tif (Array.isArray(value)) return { type: 'array', items: _getAvroType(value[0]) };\n\t\t\treturn inferAvroType(value, name);\n\t\tdefault:\n\t\t\treturn 'string'; // Default to string for unknown types\n\t}\n};\n\nconst inferAvroType = (data, typeName = 'AutoGenerated') => {\n\tif (Array.isArray(data)) {\n\t\tdata = data[0];\n\t}\n\tconst fields = Object.entries(data).map(([name, value]) => {\n\t\treturn { name, type: _getAvroType(value, `${typeName}.${name}`) };\n\t});\n\treturn {\n\t\ttype: 'record',\n\t\tname: typeName,\n\t\tfields: fields,\n\t};\n};\n\nconst _isUUID = (str) => {\n\tconst uuidV4Regex = /^[0-9A-F]{8}-[0-9A-F]{4}-4[0-9A-F]{3}-[89AB][0-9A-F]{3}-[0-9A-F]{12}$/i;\n\treturn uuidV4Regex.test(str);\n};\n\nexport { matchesQuery, generateUUID, inferAvroType };\n"],
  "mappings": "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",
  "names": ["_createHmac", "_createHash", "AWS_ALGORITHM", "AWS_REQUEST_TYPE", "S3_SERVICE", "LIST_TYPE", "UNSIGNED_PAYLOAD", "DEFAULT_STREAM_CONTENT_TYPE", "XML_CONTENT_TYPE", "JSON_CONTENT_TYPE", "SENSITIVE_KEYS_REDACTED", "MIN_MAX_REQUEST_SIZE_IN_BYTES", "HEADER_AMZ_CONTENT_SHA256", "HEADER_AMZ_DATE", "HEADER_HOST", "HEADER_AUTHORIZATION", "HEADER_CONTENT_TYPE", "HEADER_CONTENT_LENGTH", "HEADER_ETAG", "HEADER_LAST_MODIFIED", "ERROR_PREFIX", "ERROR_ACCESS_KEY_REQUIRED", "ERROR_SECRET_KEY_REQUIRED", "ERROR_ENDPOINT_REQUIRED", "ERROR_BUCKET_NAME_REQUIRED", "ERROR_KEY_REQUIRED", "ERROR_UPLOAD_ID_REQUIRED", "ERROR_PARTS_REQUIRED", "ERROR_INVALID_PART", "ERROR_DATA_BUFFER_REQUIRED", "ERROR_PREFIX_TYPE", "ERROR_MAX_KEYS_TYPE", "ERROR_DELIMITER_REQUIRED", "expectArray", "encodeAsHex", "c", "uriEscape", "uriStr", "uriResourceEscape", "string", "S3", "accessKeyId", "secretAccessKey", "endpoint", "bucketName", "region", "maxRequestSizeInBytes", "requestAbortTimeout", "logger", "props", "method", "key", "delimiter", "prefix", "maxKeys", "opts", "level", "message", "additionalData", "sanitize", "obj", "acc", "sanitizedData", "logEntry", "headers", "encodedKey", "url", "signedHeaders", "contentLength", "res", "error", "errorMessage", "keyPath", "query", "body", "datetime", "_hash", "canonicalHeaders", "canonicalRequest", "stringToSign", "signature", "authorizationHeader", "value", "credentialScope", "signingKey", "_hmac", "urlWithQuery", "responseBody", "lastModified", "etag", "data", "_parseXml", "output", "o", "i", "a", "_a", "_b", "_c", "wholeFile", "rangeFrom", "rangeTo", "fileType", "parsedResponse", "uploadId", "partNumber", "ETag", "parts", "part", "xmlBody", "errorBody", "errorCode", "queryParams", "dateStamp", "kDate", "kRegion", "kService", "content", "hashSum", "encoding", "hmacSum", "str", "unescapeXml", "json", "re", "match", "fullKey", "parsedValue", "avro", "lowstorage_ERROR_CODES", "lowstorageError", "message", "code", "CollectionNotFoundError", "collectionName", "SchemaValidationError", "DocumentValidationError", "S3OperationError", "operation", "randomUUID", "matchesQuery", "document", "query", "key", "generateUUID", "c", "r", "v", "_getAvroType", "value", "name", "_isUUID", "inferAvroType", "data", "typeName", "fields", "str", "MODULE_NAME", "DEFAULT_DELIMITER", "PROJECT_DIR_PREFIX", "COL_SUFFIX", "CHUNG_1MB", "CHUNG_5MB", "lowstorage", "options", "O", "avro", "args", "requiredFields", "field", "lowstorageError", "lowstorage_ERROR_CODES", "colName", "listed", "entry", "error", "S3OperationError", "schema", "data", "KEY", "exists2", "oldColName", "newColName", "CollectionNotFoundError", "oldCol", "oldColData", "autoCreate", "colPath", "avroType", "exists", "schemaContent", "Collection", "SchemaValidationError", "s3", "dirPrefix", "doc", "DocumentValidationError", "items", "inferAvroType", "wrapperType", "bufferData", "item", "generateUUID", "CHUNK_SIZE", "firstData", "offset", "bufferArr", "repeat", "nextDataResponse", "nextDataBody", "query", "start", "end", "matchesQuery", "update", "updatedCount", "i", "updatedDoc", "docIndex", "initialLength", "newData"]
}

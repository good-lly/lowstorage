var l=(...r)=>{for(let t of r)if(typeof t!="object"||t===null)throw new Error("lowstorage: missing args or args not an object")},o=(r,t)=>Object.keys(t).every(a=>r[a]===t[a]),u=()=>crypto.randomUUID(),d=(r,t=null)=>{let a=null;if(t){if(a=r[t],a.get&&a.put&&a.delete&&a.list)return a;throw new Error(`lowstorage: store ${t} not found`)}for(let e of Object.values(r))if(e.get&&e.put&&e.delete&&e.list)return e;throw new Error("lowstorage: no valid store found")},i=class{constructor(t,a){this._colName=t,this._store=a}async _loadData(){try{let t=await this._store.get(`${this._colName}/${this._colName}.json`);return t?t.json():[]}catch(t){if(t.code==="ENOENT")return[];throw t}}async _saveData(t){let a=`${this._colName}/${this._colName}.json`;return this._store.put(a,JSON.stringify(t))}async insert(t){Array.isArray(t)||(t=[t]);let a=await this._loadData();for(let e of t){if(typeof e!="object"||e===null)throw new Error("Invalid input: input must be an object or an array of objects");e._id=e._id||u(),a.push(e)}await this._saveData(a)}async find(t={}){return(await this._loadData()).filter(e=>o(e,t))}async findOne(t={}){return(await this.find(t))[0]||null}async update(t={},a={}){let e=await this._loadData(),n=0;return e.forEach(s=>{o(s,t)&&(Object.assign(s,a),n++)}),n>0&&await this._saveData(e),n}async updateOne(t={},a={}){let e=await this._loadData(),n=e.findIndex(s=>o(s,t));return n!==-1?(Object.assign(e[n],a),await this._saveData(e),1):0}async delete(t={}){let a=await this._loadData(),e=a.length,n=a.filter(s=>!o(s,t));return await this._saveData(n),e-n.length}async count(t={}){return(await this.find(t)).length}async remove(){let a=(await this._loadData()).length;return await this._saveData([]),a}},c=class{constructor(t,a){l(t),this._store=d(t,a)}collection(t){return new i(t,this._store)}async listCollections(){let t=await this._store.list(),a=t.truncated,e=a?t.cursor:void 0;for(;a;){let s=await this._store.list({cursor:e});t.objects.push(...s.objects),a=s.truncated,e=s.cursor}return t.objects.filter(s=>s.key.endsWith(".json")).map(s=>s.key.split("/")[0])}},h=c;export{h as default};

var d=(...s)=>{for(let t of s)if(typeof t!="object"||t===null)throw new Error("lowstorage: missing args or args not an object")},i=(s,t)=>Object.keys(t).every(a=>s[a]===t[a]),h=()=>crypto.randomUUID(),o=(s,t)=>typeof s<"u"&&s!==null&&typeof s[t]=="function",f=s=>typeof s=="object"&&s!==null&&o(s,"get")&&o(s,"put")&&o(s,"delete")&&o(s,"list"),_=(s,t)=>{if(t&&f(s[t]))return s[t];throw new Error("lowstorage: no valid store found")},c=class{constructor(t,a){this._colName=t,this._store=a}async _loadData(){try{let t=await this._store.get(`${this._colName}/${this._colName}.json`);return t?t.json():[]}catch(t){if(t.code==="ENOENT")return[];throw t}}async _saveData(t){let a=`${this._colName}/${this._colName}.json`;return this._store.put(a,JSON.stringify(t))}async insert(t){Array.isArray(t)||(t=[t]);let a=await this._loadData();for(let e of t){if(typeof e!="object"||e===null)throw new Error("Invalid input: input must be an object or an array of objects");e._id=e._id||h(),a.push(e)}return await this._saveData(a),t.length===1?t[0]:t}async find(t={},a={}){let e=await this._loadData(),r=parseInt(a.skip,10)||0,n=parseInt(a.limit,10)?r+parseInt(a.limit,10):void 0;return e.filter(u=>i(u,t)).slice(r,n)}async findOne(t={}){return(await this.find(t))[0]||null}async update(t={},a={}){let e=await this._loadData(),r=0;for(let n=0;n<e.length;n++)i(e[n],t)&&(Object.assign(e[n],a),r++);return r>0&&await this._saveData(e),r}async updateOne(t={},a={}){let e=await this._loadData(),r=e.findIndex(n=>i(n,t));return r!==-1?(Object.assign(e[r],a),await this._saveData(e),1):0}async delete(t={}){let a=await this._loadData(),e=a.length,r=a.filter(n=>!i(n,t));return await this._saveData(r),e-r.length}async count(t={}){return(await this.find(t)).length}async remove(){let a=(await this._loadData()).length;return await this._saveData([]),a}},l=class{constructor(t,a){d(t),this._store=_(t,a)}collection(t){return new c(t,this._store)}async listCollections(){let t=await this._store.list(),a=t.truncated,e=a?t.cursor:void 0;for(;a;){let n=await this._store.list({cursor:e});t.objects.push(...n.objects),a=n.truncated,e=n.cursor}return t.objects.filter(n=>n.key.endsWith(".json")).map(n=>n.key.split("/")[0])}},y=l;export{y as default};
